name: Reusable Build and Publish Image Workflow

on:
  workflow_call:
    inputs:
      base-image:
        required: true
        type: string
      image-name:
        required: true
        type: string
      software-version:
        required: true
        type: string
      require-base-image-changed:
        required: false
        type: boolean
        default: false

jobs:
  build_image:
    name: Build and Publish Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/dlrobson/${{ inputs.image-name }}
          tags: |
            latest
            ${{ inputs.software-version }}
          labels: |
            org.opencontainers.image.version=${{ inputs.software-version }}
            org.opencontainers.image.licenses=MIT
          annotations: |
            org.opencontainers.image.version=${{ inputs.software-version }}
            org.opencontainers.image.licenses=MIT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            UID=1000
            GID=1000
            BASE_IMAGE=${{ inputs.base-image }}
          push: ${{ github.event_name != 'pull_request' }}
          annotations: |
            ${{ steps.metadata.outputs.annotations }}
          tags: |
            ${{ steps.metadata.outputs.tags }}
          labels: |
            ${{ steps.metadata.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ inputs.image-name }}:latest
          cache-to: type=inline

      # When tags are overwritten, the old tags are not removed from the registry.
      # This action removes the old tags. This also handles multi-arch manifests, and
      # does not delete untagged images linked to the manifest.
      - uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          package: ${{ inputs.image-name }}
          token: ${{ secrets.GITHUB_TOKEN }}

